import networkx as nx
from itertools import combinations
from collections import defaultdict

from typing import Annotated
from pathlib import Path
import pandas as pd

from econ_spec_jel.config import DATACATALOGS

def task_create_network(data: Annotated[Path, DATACATALOGS["data"]["analysis"]],
) -> None:
    """Create network of JEL codes."""
    jel_to_papers = _create_jel_to_papers_mapping(data)
    co_occurrence = _create_co_occurence(jel_to_papers)
    G = _create_graph_network(co_occurrence)
    breakpoint()
    return None

def _create_jel_to_papers_mapping(data: pd.DataFrame) -> defaultdict:
    jel_to_papers = defaultdict(set)
    for paper in data:
        paper_id = paper["paper_id"]
        for jel in paper["jel_codes"]:
            jel_to_papers[jel].add(paper_id)
    return jel_to_papers

def _create_co_occurence(jel_to_papers: defaultdict) -> defaultdict:
    co_occurrence = defaultdict(int)

    for jel1, jel2 in combinations(list(jel_to_papers.keys()), 2):
        co_occurrence_count = len(jel_to_papers[jel1] & jel_to_papers[jel2])
        if co_occurrence_count > 0:
            co_occurrence[(jel1, jel2)] = co_occurrence_count
    return co_occurrence

def _create_graph_network(co_occurence: defaultdict) -> nx.Graph:
    G = nx.Graph()
    for (jel1, jel2), weight in co_occurence.items():
        G.add_edge(jel1, jel2, weight=weight)
    return G
